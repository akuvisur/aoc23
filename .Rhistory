r
i <- 99
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
grid
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitRow(grid)
c
r
nrow(f)
r <- 10
#print(r)
#max_to_consider <- min(length(f[,1])-r,r)
max_to_consider <- min(2,nrow(f)-r)
start <- max(1,r-max_to_consider+1)
end <- min(nrow(f[,1]),r+max_to_consider)
top_side <- f[start:(r),]
bottom_side <- f[(r+1):end,]
top_side
bottom_side
getSplitCol <- function(f) {
for (r in 2:(ncol(f)-1)) {
#print(r)
max_to_consider <- min(ncol(f)-r,r)
#max_to_consider <- 2
start <- max(1,r-max_to_consider+1)
end <- min(length(f[1,]),r+max_to_consider)
left_side <- f[,start:(r)]
right_side <- f[,(r+1):end]
if (is.null(ncol(left_side)) || is.null(ncol(right_side))) {
if (all(left_side==right_side)) {
return(r)
}
}
else {
right_side_rev <- right_side[,ncol(right_side):1]
if (all(left_side == right_side_rev)) {
#print(r)
return(r)
}
}
}
}
getSplitRow <- function(f) {
#print(f)
for (r in 2:(nrow(f)-1)) {
#print(r)
#max_to_consider <- min(length(f[,1])-r,r)
max_to_consider <- min(2,nrow(f)-r)
start <- max(1,r-max_to_consider+1)
end <- min(nrow(f[,1]),r+max_to_consider)
top_side <- f[start:(r),]
bottom_side <- f[(r+1):end,]
if (is.null(nrow(top_side)) || is.null(nrow(bottom_side))) {
if (all(top_side==bottom_side)) {
return(r)
}
}
else {
bottom_side_rev <- bottom_side[nrow(bottom_side):1,]
if (all(top_side == bottom_side_rev)) {
return(r)
}
}
}
}
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter)+1)) {
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) sumr <- sumr + r
if (!is.null(c)) sumc <- sumc + c
}
sumc+100*sumr
i <- 1
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
grid
getSplitCol(grid)
getSplitCol(grid %>% t())
getSplitRow(grid)
grid %>% t()
grid2 <- t(grid)
grid2
grid
grid2
getSplitCol(grid2)
f <- grid2
r <- 8
#print(r)
max_to_consider <- min(ncol(f)-r,r)
#max_to_consider <- 2
start <- max(1,r-max_to_consider+1)
end <- min(length(f[1,]),r+max_to_consider)
start
end
left_side <- f[,start:(r)]
right_side <- f[,(r+1):end]
left_side
grid2
left_side
right_side
ncol(left_side)
is.null(ncol(left_side)) || is.null(ncol(right_side))
right_side_rev <- right_side[,ncol(right_side):1]
right_side_rev
left_side
if (all(left_side == right_side_rev)) {
print(r)
return(r)
}
all(left_side==right_side_rev)
i
grid
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitRow(grid)
c
r
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
c
r <- getSplitCol(t(grid))
r
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter)+1)) {
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) sumr <- sumr + r
if (!is.null(c)) sumc <- sumc + c
}
sumc+100*sumr
i <- 96
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
grid
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
c
getSplitCol <- function(f) {
for (r in 1:(ncol(f)-1)) {
#print(r)
max_to_consider <- min(ncol(f)-r,r)
#max_to_consider <- 2
start <- max(1,r-max_to_consider+1)
end <- min(length(f[1,]),r+max_to_consider)
left_side <- f[,start:(r)]
right_side <- f[,(r+1):end]
if (is.null(ncol(left_side)) || is.null(ncol(right_side))) {
if (all(left_side==right_side)) {
return(r)
}
}
else {
right_side_rev <- right_side[,ncol(right_side):1]
if (all(left_side == right_side_rev)) {
return(r)
}
}
}
}
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
c
getSplitCol <- function(f) {
for (r in 1:(ncol(f)-1)) {
#print(r)
max_to_consider <- min(ncol(f)-r,r)
#max_to_consider <- 2
start <- max(1,r-max_to_consider+1)
end <- min(length(f[1,]),r+max_to_consider)
left_side <- f[,start:(r)]
right_side <- f[,(r+1):end]
if (is.null(ncol(left_side)) || is.null(ncol(right_side))) {
if (all(left_side==right_side)) {
return(r)
}
}
else {
right_side_rev <- right_side[,ncol(right_side):1]
if (all(left_side == right_side_rev)) {
return(r)
}
}
}
}
getSplitRow <- function(f) {
#print(f)
for (r in 2:(nrow(f)-1)) {
#print(r)
#max_to_consider <- min(length(f[,1])-r,r)
max_to_consider <- min(2,nrow(f)-r)
start <- max(1,r-max_to_consider+1)
end <- min(nrow(f[,1]),r+max_to_consider)
top_side <- f[start:(r),]
bottom_side <- f[(r+1):end,]
if (is.null(nrow(top_side)) || is.null(nrow(bottom_side))) {
if (all(top_side==bottom_side)) {
return(r)
}
}
else {
bottom_side_rev <- bottom_side[nrow(bottom_side):1,]
if (all(top_side == bottom_side_rev)) {
return(r)
}
}
}
}
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter)+1)) {
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) sumr <- sumr + r
if (!is.null(c)) sumc <- sumc + c
}
sumc+100*sumr
sumc
sumr
insertEmptyRow <- function(x,n) {
return(
rbind(
x[1:n, , drop = FALSE],rep("$",times=ncol(x)),x[(n+1):nrow(x), , drop=FALSE]
)
)
}
# inserts AFTER n
insertEmptyCol <- function(x,n) {
return(
cbind(
x[,1:n , drop = FALSE],rep("$",times=nrow(x)),x[,(n+1):ncol(x), drop=FALSE]
)
)
}
insertEmptyRow <- function(x,n) {
return(
rbind(
x[1:n, , drop = FALSE],rep("$",times=ncol(x)),x[(n+1):nrow(x), , drop=FALSE]
)
)
}
# inserts AFTER n
insertEmptyCol <- function(x,n) {
return(
cbind(
x[,1:n , drop = FALSE],rep("$",times=nrow(x)),x[,(n+1):ncol(x), drop=FALSE]
)
)
}
print(insertEmptyRow(grid,r))
r
c
print(insertEmptyCol(grid,c))
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter)+1)) {
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) {
sumr <- sumr + r
print(insertEmptyRow(grid,r))
}
if (!is.null(c)) {
sumc <- sumc + c
print(insertEmptyCol(grid,c))
}
}
sumr
sumc
sumr*100
31500+375
#aoc13
require(dplyr)
file <- "input_data/input13.txt"
input <- readLines(file)
insertEmptyRow <- function(x,n) {
return(
rbind(
x[1:n, , drop = FALSE],rep("$",times=ncol(x)),x[(n+1):nrow(x), , drop=FALSE]
)
)
}
# inserts AFTER n
insertEmptyCol <- function(x,n) {
return(
cbind(
x[,1:n , drop = FALSE],rep("$",times=nrow(x)),x[,(n+1):ncol(x), drop=FALSE]
)
)
}
getSplitCol <- function(f) {
for (r in 1:(ncol(f)-1)) {
#print(r)
max_to_consider <- min(ncol(f)-r,r)
#max_to_consider <- 2
start <- max(1,r-max_to_consider+1)
end <- min(length(f[1,]),r+max_to_consider)
left_side <- f[,start:(r)]
right_side <- f[,(r+1):end]
if (is.null(ncol(left_side)) || is.null(ncol(right_side))) {
if (all(left_side==right_side)) {
return(r)
}
}
else {
right_side_rev <- right_side[,ncol(right_side):1]
if (all(left_side == right_side_rev)) {
return(r)
}
}
}
}
getSplitRow <- function(f) {
#print(f)
for (r in 2:(nrow(f)-1)) {
#print(r)
#max_to_consider <- min(length(f[,1])-r,r)
max_to_consider <- min(2,nrow(f)-r)
start <- max(1,r-max_to_consider+1)
end <- min(nrow(f[,1]),r+max_to_consider)
top_side <- f[start:(r),]
bottom_side <- f[(r+1):end,]
if (is.null(nrow(top_side)) || is.null(nrow(bottom_side))) {
if (all(top_side==bottom_side)) {
return(r)
}
}
else {
bottom_side_rev <- bottom_side[nrow(bottom_side):1,]
if (all(top_side == bottom_side_rev)) {
return(r)
}
}
}
}
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter)+1)) {
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) {
sumr <- sumr + r
print(insertEmptyRow(grid,r))
}
if (!is.null(c)) {
sumc <- sumc + c
print(insertEmptyCol(grid,c))
}
}
sumc+100*sumr
#31366 wrong
#39xxx too much
# 31875 WRONG
sumc+(100*sumr)
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter)+1)) {
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) {
sumr <- sumr + r
#print(insertEmptyRow(grid,r))
}
if (!is.null(c)) {
sumc <- sumc + c
#print(insertEmptyCol(grid,c))
}
}
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter)+1)) {
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) {
sumr <- sumr + r
#print(insertEmptyRow(grid,r))
}
if (!is.null(c)) {
sumc <- sumc + c
#print(insertEmptyCol(grid,c))
}
}
iter
iter[99]
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in (seq_along(iter))) {
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) {
sumr <- sumr + r
#print(insertEmptyRow(grid,r))
}
if (!is.null(c)) {
sumc <- sumc + c
#print(insertEmptyCol(grid,c))
}
}
sumc+(100*sumr)
nrow(iter)
length(iter)
iter <- which(nzchar(input) == FALSE)
sumr <- 0
sumc <- 0
for (i in 1:(length(iter)+1)) {
print(i)
start <- max(0,iter[i-1]+1)
end <- iter[i]-1
if (is.na(end)) end <- length(input)
grid <- input[start:end] %>% sapply(strsplit, NULL) %>% unlist() %>% matrix(nrow=nchar(input[start:end][1])) %>% t()
# fix row -> cols, col -> rows
c <- getSplitCol(grid)
r <- getSplitCol(t(grid))
#r <- getSplitRow(grid)
print(paste("Grid at",start,":",end," r=",r," c=",c))
if (!is.null(r)) {
sumr <- sumr + r
#print(insertEmptyRow(grid,r))
}
if (!is.null(c)) {
sumc <- sumc + c
#print(insertEmptyCol(grid,c))
}
}
sumc+(100*sumr)
max(r,c)
